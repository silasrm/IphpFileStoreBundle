<?php
namespace Iphp\FileStoreBundle\Tests\Naming;

use Iphp\FileStoreBundle\Naming\DefaultNamer;
use Iphp\FileStoreBundle\Tests\DummyEntity;
use Iphp\FileStoreBundle\Tests\Mocks;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-05-21 at 12:38:30.
 */
class DefaultNamerTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var \Iphp\FileStoreBundle\Naming\DefaultNamer
     */
    protected $namer;


    protected function setUp()
    {
        $this->namer = new DefaultNamer;
    }


    protected function getMappingWithObject($object)
    {
        $propertyMapping = Mocks::getPropertyMappingMock($this);
        $propertyMapping->expects($this->any())
            ->method('getObj')
            ->will($this->returnValue($object));

        return $propertyMapping;
    }


    public function testTranslitRename()
    {
        $propertyMapping = Mocks::getPropertyMappingMock($this);
        $this->assertSame($this->namer->translitRename($propertyMapping,
                'АаБбВвГгДдЕеЁёЖжЗзИиЙйКкЛлМмНнОоПпРрСсТтУуФфХхЦцЧчШшЩщЪъЫыЬьЭэЮюЯя'),
            'aabbvvggddeeeezzzziijjkkllmmnnoopprrssttuuffhhccccssssyyeeuuaa');


        $this->assertSame($this->namer->translitRename($propertyMapping,
                'En Français on a des caractères accentués !'),
            'en-francais-on-a-des-caracteres-accentues');


        $this->assertSame($this->namer->translitRename($propertyMapping,  ' ! , Давай-Давай .'),
                                                                          'davaj-davaj-.');
    }


    public function testPropertyRename()
    {
        $obj = new DummyEntity();
        $obj->setId(12345);

        $propertyMapping = $this->getMappingWithObject($obj);
        $this->assertSame($this->namer->propertyRename($propertyMapping, 'some-name.jpg', array()), '12345.jpg');
    }


    public function testPropertyRenameByField()
    {
        $obj = new DummyEntity();
        $obj->setTitle('some-title');

        $propertyMapping = $this->getMappingWithObject($obj);
        $this->assertSame(
            $this->namer->propertyRename($propertyMapping, 'some-name.jpg', array('field' => 'title')),
            'some-title.jpg');
    }


    public function testPropertyPrefixRename()
    {
        $obj = new DummyEntity();
        $obj->setId(12345);

        $propertyMapping = $this->getMappingWithObject($obj);
        $this->assertSame(
            $this->namer->propertyPrefixRename($propertyMapping, 'some-name.jpg', array()),
            '12345-some-name.jpg');
    }

    public function testPropertyPrefixRenameWithParams()
    {
        $obj = new DummyEntity();

        $propertyMapping = $this->getMappingWithObject($obj);
        $propertyMapping->expects($this->once())
            ->method('getFileDataPropertyName')
            ->will($this->returnValue('file'));

        $this->assertSame($this->namer->propertyPrefixRename($propertyMapping, 'some-name.jpg',
            array('use_field_name' => true, 'delimiter' => '_')), 'file_some-name.jpg');
    }


    public function testPropertyPostfixRename()
    {
        $obj = new DummyEntity();
        $obj->setTitle('some-title');

        $propertyMapping = $this->getMappingWithObject($obj);

        $this->assertSame($this->namer->propertyPostfixRename($propertyMapping, 'some-name.jpg',
            array('field' => 'title')), 'some-name-some-title.jpg');
    }


    public function testReplaceRename()
    {
        $obj = new DummyEntity();
        $propertyMapping = $this->getMappingWithObject($obj);


        $this->assertSame($this->namer->replaceRename($propertyMapping, 'some-name.jpg',
            array('name' => 'staff')), 'some-staff.jpg');
    }


    public function testResolveCollision()
    {
        $this->assertSame($this->namer->resolveCollision('some-name.jpg', 5), 'some-name_5.jpg');
    }
}
